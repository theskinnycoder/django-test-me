# Generated by Django 3.2.3 on 2021-05-16 11:39

from django.db import migrations, models
import django.utils.timezone
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=254)),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text="Enter your institute's domain email-id.", max_length=254, unique=True)),
                ('roll_number', models.CharField(blank=True, error_messages={'unique': 'A student with that roll number already exists.'}, help_text='Enter the roll number assigned by your institute.', max_length=10, null=True, unique=True)),
                ('branch', models.CharField(choices=[('CSE', 'Cse'), ('IT', 'It'), ('ECE', 'Ece'), ('EEE', 'Eee'), ('MECH', 'Mech'), ('CIVIL', 'Civil'), ('CHEM', 'Chem')], help_text='Select the engineering branch you study or teach.', max_length=5)),
                ('section', models.IntegerField(blank=True, choices=[(1, 'I'), (2, 'Ii'), (3, 'Iii'), (4, 'Iv')], help_text='Mention your section.', null=True)),
                ('semester', models.IntegerField(blank=True, choices=[(1, 'I'), (2, 'Ii'), (3, 'Iii'), (4, 'Iv'), (5, 'V'), (6, 'Vi'), (7, 'Vii'), (8, 'Viii')], help_text='Provide your semester (not year).', null=True)),
                ('image', models.ImageField(default='default.jpg', help_text='This will be your display image.', upload_to='profile_pics', verbose_name='Profile Pic')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['email'],
            },
            managers=[
                ('objects', users.managers.CustomUserManager()),
            ],
        ),
    ]
